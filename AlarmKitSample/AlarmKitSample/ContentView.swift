//
//  ContentView.swift
//
//  This file is automatically generated by MakeXproj
//

import AlarmKit
import AppIntents
import SwiftUI

struct ContentView: View {
    @State private var isAuthorized: Bool = false
    @State private var scheduleDate: Date = .now
    var body: some View {
        NavigationStack {
            Group {
                if isAuthorized {
                    AlarmView()
                } else {
                    Text("Please authorize the app to access alarms.")
                }
            }
            .navigationTitle("AlarmKit")
        }
        .task {
            do {
                try await checkAndAuthorize()
            } catch {
                print(error.localizedDescription)
            }
        }
    }

    private func AlarmView() -> some View {
        List {
            Section("Alarms") {
                DatePicker("", selection: $scheduleDate, displayedComponents: [.date, .hourAndMinute])
                    .labelsHidden()
            }
            Button("Schedule Alarm") {
                Task {
                    do {
                        try await setAlarm()
                    } catch {
                        print(error.localizedDescription)
                    }
                }
            }
        }
    }

    private func setAlarm() async throws {
        /// Alarm ID
        let id = UUID()

        /// Scoundary Alert Button
        let secoundaryButton = AlarmButton(text: "Go to App", textColor: .white, systemImageName: "app.fill")

        /// Alart
        let alert = AlarmPresentation.Alert(
            title: "Alarm Scheduled",
            stopButton: .init(text: "Stop Alarm", textColor: .red, systemImageName: "stop.fill"),
            secondaryButton: secoundaryButton,
            secondaryButtonBehavior: .custom
        )

        /// Presentation
        let presentation = AlarmPresentation(
            alert: alert
        )

        /// Attributes
        let attributes = AlarmAttributes<CountDownAttributes>(presentation: presentation, metadata: .init(), tintColor: .orange)

        /// Schedule
        let schedule = Alarm.Schedule.fixed(scheduleDate)

        /// Configuration
        let config = AlarmManager.AlarmConfiguration(
            schedule: schedule,
            attributes: attributes,
            secondaryIntent: OpenAppIntent(id: id)
        )

        /// Adding alarm to the System
        let _ = try await AlarmManager.shared.schedule(id: id, configuration: config)
        print("Alarm scheduled with ID: \(id)")
    }

    private func checkAndAuthorize() async throws {
        switch AlarmManager.shared.authorizationState {
        case .notDetermined:
            let status = try await AlarmManager.shared.requestAuthorization()
            isAuthorized = status == .authorized
        case .denied:
            isAuthorized = false
        case .authorized:
            isAuthorized = true
        @unknown default:
            fatalError("Unknown authorization state")
        }
    }
}

#Preview {
    ContentView()
}

struct OpenAppIntent: LiveActivityIntent {
    static var title: LocalizedStringResource = "Opens App"
    static var openAppWhenRun: Bool = true
    static var isDiscoverable: Bool = false

    @Parameter
    var id: String

    init(id: UUID) {
        self.id = id.uuidString
    }

    init() {}

    func perform() async throws -> some IntentResult {
        if let alarmID = UUID(uuidString: id) {
            print("Opening app for alarm with ID: \(alarmID)")
        }

        return .result()
    }
}
